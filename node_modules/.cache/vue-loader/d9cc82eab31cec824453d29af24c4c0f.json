{"remainingRequest":"D:\\work\\westlottery\\lottery_mobile_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\westlottery\\lottery_mobile_vue\\src\\components\\title\\Title.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\work\\westlottery\\lottery_mobile_vue\\src\\components\\title\\Title.vue","mtime":1568863105605},{"path":"D:\\work\\westlottery\\lottery_mobile_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\work\\westlottery\\lottery_mobile_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\work\\westlottery\\lottery_mobile_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\work\\westlottery\\lottery_mobile_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n\nimport { _getstatus } from \"@/assets/src/forgame.js\";\nimport { setTimeout } from \"timers\";\nexport default {\n    name: \"Title\",\n    props: {\n        menu:Array\n    },\n    data() {\n        return {\n            sideBarSwitch: 0,\n            sideGameType: 0,\n            sideItemClicked: undefined,\n            windowItemTitleNum: undefined,\n            windowItemClicked: undefined,            \n            mask: 0,\n            noContent: \"\",\n            refresh: 0,\n            game: null,\n      loginID: null,\n      balance: null\n        };\n    },\n    computed: {        \n        isLogin() {\n      this.loginID = this.$store.state.bet.loginID;\n      this.balance = this.$store.state.balance;\n            return this.$store.state.isLogin;\n    }\n        },\n  created(){\n        \n    },\n    methods: {\n        changeGameType: function(changeType, gameType) {\n            if (gameType == \"gameType\") {\n                this.gameType = changeType;\n            } else if (gameType == \"sideGameType\") {\n                this.sideGameType = changeType;\n            }\n            this.itemClicked = undefined;\n            this.sideItemClicked = undefined;\n        },\n        itemClick: function(item, type) {            \n            if (type == \"index\") {\n                if (this.itemClicked == item) {\n                    this.itemClicked = undefined;\n                    return;\n                }\n                this.itemClicked = item;\n            }\n            if (type == \"side\") {\n                if (item == this.sideItemClicked) {\n                    this.sideItemClicked = undefined;\n                    return;\n                }\n                this.sideItemClicked = item;\n            }\n        },\n        footerOnIMG: function(index) {\n            if (this.footer[index].alias == this.webName) {\n                let footerActiveIMG = this.footer[index].src.split(\".\");\n                let footerActiveIMG_new =\n                    footerActiveIMG[0] + \"_on.\" + footerActiveIMG[1];\n                return footerActiveIMG_new;\n            }\n            return this.footer[index].src;\n        },\n        test: function(item) {\n            if (this.itemClicked == item) {\n                let num = this.game[this.gameType].gameItem[item].sub.length;\n                let range = Math.ceil(num / 2);\n                if (range == 0) {\n                    this.noContent = \"no\";\n                } else {\n                    this.noContent = \"yes\";\n                    let margin = range * 6 + \"vmax\";\n                    return \"marginBottom:\" + margin;\n                }\n            }\n        },\n        gamePage: function(router, item) {\n            this.$router.push({\n                path: \"/\" + router + \"/\" + item.routername + \"/\" + item.gameCode\n            });\n        },\n        turnBack: function() {\n            this.$router.go(-1);\n        },       \n        refreshbalance: function() {\n            if (this.refresh == 1) {\n                return;\n            }\n            this.refresh = 1;\n            _getstatus(this);\n            let _this = this;\n            setTimeout(function() {\n                 _this.refresh = 0;\n            }, 2000);\n        },\n        searchStatusChange: function() {\n            if(this.$store.state.searchStatus == false){\n                this.$store.state.searchStatus= true\n                this.$store.dispatch(\"setsearchStatus\", this.$store.state.searchStatus)\n            }else{\n                this.$store.state.searchStatus= false\n                this.$store.dispatch(\"setsearchStatus\", this.$store.state.searchStatus)\n            }\n        }\n    },\n    watch: {        \n        $route(to, from) {            \n      this.sideBarSwitch = 0;\n      this.mask = 0;\n    }\n  }\n};\n",{"version":3,"sources":["Title.vue"],"names":[],"mappingsfile":"Title.vue","sourceRoot":"src/components/title","sourcesContent":["<template src=\"./Title.html\"></template>\n    \n<script>\nimport { _getstatus } from \"@/assets/src/forgame.js\";\nimport { setTimeout } from \"timers\";\nexport default {\n    name: \"Title\",\n    props: {\n        menu:Array\n    },\n    data() {\n        return {\n            sideBarSwitch: 0,\n            sideGameType: 0,\n            sideItemClicked: undefined,\n            windowItemTitleNum: undefined,\n            windowItemClicked: undefined,            \n            mask: 0,\n            noContent: \"\",\n            refresh: 0,\n            game: null,\n      loginID: null,\n      balance: null\n        };\n    },\n    computed: {        \n        isLogin() {\n      this.loginID = this.$store.state.bet.loginID;\n      this.balance = this.$store.state.balance;\n            return this.$store.state.isLogin;\n    }\n        },\n  created(){\n        \n    },\n    methods: {\n        changeGameType: function(changeType, gameType) {\n            if (gameType == \"gameType\") {\n                this.gameType = changeType;\n            } else if (gameType == \"sideGameType\") {\n                this.sideGameType = changeType;\n            }\n            this.itemClicked = undefined;\n            this.sideItemClicked = undefined;\n        },\n        itemClick: function(item, type) {            \n            if (type == \"index\") {\n                if (this.itemClicked == item) {\n                    this.itemClicked = undefined;\n                    return;\n                }\n                this.itemClicked = item;\n            }\n            if (type == \"side\") {\n                if (item == this.sideItemClicked) {\n                    this.sideItemClicked = undefined;\n                    return;\n                }\n                this.sideItemClicked = item;\n            }\n        },\n        footerOnIMG: function(index) {\n            if (this.footer[index].alias == this.webName) {\n                let footerActiveIMG = this.footer[index].src.split(\".\");\n                let footerActiveIMG_new =\n                    footerActiveIMG[0] + \"_on.\" + footerActiveIMG[1];\n                return footerActiveIMG_new;\n            }\n            return this.footer[index].src;\n        },\n        test: function(item) {\n            if (this.itemClicked == item) {\n                let num = this.game[this.gameType].gameItem[item].sub.length;\n                let range = Math.ceil(num / 2);\n                if (range == 0) {\n                    this.noContent = \"no\";\n                } else {\n                    this.noContent = \"yes\";\n                    let margin = range * 6 + \"vmax\";\n                    return \"marginBottom:\" + margin;\n                }\n            }\n        },\n        gamePage: function(router, item) {\n            this.$router.push({\n                path: \"/\" + router + \"/\" + item.routername + \"/\" + item.gameCode\n            });\n        },\n        turnBack: function() {\n            this.$router.go(-1);\n        },       \n        refreshbalance: function() {\n            if (this.refresh == 1) {\n                return;\n            }\n            this.refresh = 1;\n            _getstatus(this);\n            let _this = this;\n            setTimeout(function() {\n                 _this.refresh = 0;\n            }, 2000);\n        },\n        searchStatusChange: function() {\n            if(this.$store.state.searchStatus == false){\n                this.$store.state.searchStatus= true\n                this.$store.dispatch(\"setsearchStatus\", this.$store.state.searchStatus)\n            }else{\n                this.$store.state.searchStatus= false\n                this.$store.dispatch(\"setsearchStatus\", this.$store.state.searchStatus)\n            }\n        }\n    },\n    watch: {        \n        $route(to, from) {            \n      this.sideBarSwitch = 0;\n      this.mask = 0;\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style src=\"./Title.css\" scoped>\n</style>\n"]}]}